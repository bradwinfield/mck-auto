# Start with a clean environment before running terraform...
clean_up_tfstate_files.sh

# Check/create users in vCenter before everything else...
check_users.py
# This terraform directory contains code to create roles and privileges.
user_terraform

# Add the user/role in the global permission table...
env_for_create_global_permissions.py
check_global_permissions.py

# Setup environment for next few steps
env_for_cluster_rp.py
env_for_library_id.py

# Check/create the AVI resource pool...
check_avi_resource_pool.py

# Create the 3 AVI controllers...
avi_controller_terraform
Abort if the AVI Controller does not get installed.

# Add step to configure the AVI controllers...
# This step is generating an error because it can not yet set the passphrase. Do it during manual config step.
set_avi_admin_password.py
Abort if AVI is not initialized.

avi_cloud_credentials.py
avi_configure_mgmt_network.py
avi_ipam_data_profile.py
avi_cloud_finish.py


print_manual_steps.sh

# Convert the license to essentials...
#avi_license_essentials.py
#Abort if we can not convert to ESSENTIALS

# Configure the Default-Cloud
# Manual step: avi_cloud.py

# Configure the rest of AVI
# Manual step: configure_avi.py
# Abort if we can not configure AVI for Workload Management.
# Manual steps to configure AVI
Exit to perform manual steps to configure AVI.

# Once you have completed the AVI configuration manually, restart automation from here.
avi_ha.py
Abort if we can not configure AVI HA

# When you configure AVI for HA, it will take a while
# before it becomes responsive. So poll it until it is ready.
wait_for_avi_ha.py
Abort if AVI never comes back.

# Enable Workload Management
wm_terraform
Abort on Error

# Get the Supervisor Cluster VIP...
# This step will attempt to get the VIP for about 30 minutes giving AVI time to allocate the VIP.
get_kube_api_vip.py

# Try to login to the supervisor cluster
# This next step will try for about 20 minutes to give the supervisor cluster time to fully come up.
set_kubeconfig.py
k8s_supervisor_login_admin.py
Abort now if we can not login to the supervisor cluster

# Create the vSphere namespace (but first get some vCenter object IDs)...
env_for_create_ns.py
create_vsphere_namespace.py

# Step to create workload cluster (needs get_kube_api_vip.py)
k8s_supervisor_login_admin.py
tkcclustercreate.py
k8s_cluster_login.py
Abort now if we can not login to the workload cluster

# Steps to complete workload cluster (needs k8s_cluster_login.py & get_kube_api_vip.py)
check_sc.py
check_kapp.py
tanzu_package.py
cert-manager.py
check_contour.py
check_cluster_rb.py
check_fluentbit.py
check_prisma.sh

# Create and publish storage policy on workload with desired Reclaimpolicy and bind mode
create-local-sc.py

# Smoke test
test_ingress.py

print_final_messages.py

# End

